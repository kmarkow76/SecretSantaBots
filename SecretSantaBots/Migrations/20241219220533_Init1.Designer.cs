// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SecretSantaBots.DataBase;

#nullable disable

namespace SecretSantaBots.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241219220533_Init1")]
    partial class Init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SecretSantaBots.DataBase.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chatId");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.HasKey("Id");

                    b.ToTable("game");
                });

            modelBuilder.Entity("SecretSantaBots.DataBase.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AssignedToId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignedToId");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("gameId");

                    b.Property<bool>("Role")
                        .HasColumnType("boolean")
                        .HasColumnName("role");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegramId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId")
                        .IsUnique();

                    b.HasIndex("GameId");

                    b.ToTable("participant");
                });

            modelBuilder.Entity("SecretSantaBots.DataBase.Models.Participant", b =>
                {
                    b.HasOne("SecretSantaBots.DataBase.Models.Participant", "AssignedTo")
                        .WithOne()
                        .HasForeignKey("SecretSantaBots.DataBase.Models.Participant", "AssignedToId");

                    b.HasOne("SecretSantaBots.DataBase.Models.Game", "Game")
                        .WithMany("Participants")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SecretSantaBots.DataBase.Models.Game", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
